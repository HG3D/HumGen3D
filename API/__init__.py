import sys

sys.path.append("..")

import json
import os
import os as bpy  # type:ignore
import random
import subprocess
import time

from ..core.HG_PCOLL import refresh_pcoll
#TODO replace .. with HumGen3D
from ..features.common.HG_COMMON_FUNC import get_addon_root  # type:ignore
from ..features.common.HG_COMMON_FUNC import (get_prefs, hg_log,
                                              toggle_hair_visibility)
from ..features.common.HG_RANDOM import random_body_type
from ..features.creation_phase.HG_CREATION import \
    HG_CREATION_BASE  # type:ignore
from ..features.creation_phase.HG_FACE import randomize_facial_feature_categ
from ..features.creation_phase.HG_FINISH_CREATION_PHASE import \
    finish_creation_phase
from ..features.creation_phase.HG_MATERIAL import randomize_skin_shader
from ..user_interface.HG_PANEL_FUNCTIONS import in_creation_phase


class HumGenException(Exception):
    pass

class HG_Human():
    def __init__(self, existing_human = None):
        if existing_human:
            self.__check_if_valid_hg_rig(existing_human)
            
            self._rig_object = existing_human
            self._body_object = existing_human.HG.body_obj
            self._gender = existing_human.HG.gender
        else:
            self._rig_object = None
            self._body_object = None
            self._gender = None

    @property
    def rig_object(self):
        return self._rig_object
    
    @property
    def body_object(self):
        return self._body_object
    
    @property
    def gender(self):
        return self._gender

    def __check_if_valid_hg_rig(self, hg_rig):
        """Checks if the passed hg_rig is a valid Human Generator human.

        Args:
            hg_rig (bpy.types.Object): Blender object to check if it's a valid HG rig
        """
        if not hg_rig:
            raise TypeError('Expected a Blender object of type "ARMATURE", not "NoneType"')
        
        if not hg_rig.HG.ishuman:
            if hg_rig.type != 'ARMATURE':
                raise TypeError(f'Expected a human object of type "ARMATURE", not "{hg_rig.type}"')
            else:
                raise ValueError('Passed armature was not created with Human Generator.')

    def get_starting_human_options(self, context, gender = None):
        """Get a list of all starting human options (i.e. Caucasian 5, Black 2)

        Args:
            context (bpy.context): Blender context

        Returns:
            list[str]: List of all items in this preview collection
        """
        sett = context.scene.HG3D
        
        if self._rig_object:
            raise HumGenException('This HG_Human instance already exists in Blender.')
        
        if gender:
            if gender not in ('male', 'female'):
                raise ValueError(f'Gender {gender} not found in ("male", "female")')
            self._gender = gender
        else:
            self._gender = random.choice(('male', 'female')) 
        
        sett.gender = self._gender
        refresh_pcoll(None, context, 'humans')
        
        return sett['previews_list_humans']

    def create(self, context, chosen_starting_human = None) -> bpy.types.Object:
        """Adds a new human to this Blender scene. This should not be confused with
        generate_human_in_background(), which creates a human from start to finish.
        The human generated by this create_new_human() function still has to be
        configured by you, it's basically the same as the "Create new human" button
        in the Human Generator interface.

        Args:
            context (bpy.context): Blender context
            chosen_starting_human (str, optional): Optionally, you can choose the 
                starting human yourself by picking an option from 
                get_starting_human_options(). 
                Defaults to None.
            given_name (str, optional): Give the newly created human a name. If not
                passed, a random name will be chosen. 
                Defaults to None.

        """
        sett = context.scene.HG3D
  
        if self._rig_object:
            raise HumGenException('This HG_Human instance already exists in Blender.')  
        
        if not self._gender:
            self._gender = random.choice(('male', 'female')) 
            
        sett.gender = self._gender
        refresh_pcoll(None, context, 'humans')
        
        if chosen_starting_human:
            sett.pcoll_humans = chosen_starting_human
        else:
            sett.pcoll_humans = random.choice(self.get_starting_human_options(context))
        
        hg_rig, hg_body = HG_CREATION_BASE().create_human(context)
        
        HG_CREATION_BASE()._give_random_name_to_human(self._gender, hg_rig)
        
        self._rig_object = hg_rig
        self._body_object = hg_body

    def randomize_body_proportions(self):
        self.__check_if_rig_exists()
        self.__check_if_in_creation_phase()
        
        random_body_type(self._rig_object)

    def randomize_face_proportions(self):
        self.__check_if_rig_exists()        
        self.__check_if_in_creation_phase()

        randomize_facial_feature_categ(
            self._body_object,
            'all',
            use_bell_curve=self._gender == 'female'
        )

    def get_hair_options(self, context) -> list:
        self.__check_if_rig_exists()
        return self.__get_pcoll_list(context, 'hair') 

    def set_hair(self, context, chosen_hair_option = None):
        self.__check_if_rig_exists()
                
        if not chosen_hair_option:
            chosen_hair_option = random.choice(self.get_hair_options(context))
        
        self.__set_active_in_pcoll(context, 'hair', chosen_hair_option)
        self.set_hair_visibility(False)

    def randomize_skin(self):
        randomize_skin_shader(self._body_object, self._gender)

    def finish_creation_phase(self, context):
        finish_creation_phase(None, context, self._rig_object, self._body_object)     
        self._rig_object.HG.phase = 'clothing'        

    def set_hair_visibility(self, set_visible):
        hg_body = self._body_object
        hair_systems= [m.particle_system for m in hg_body.modifiers 
                       if m.type == 'PARTICLE_SYSTEM']

        for ps in hair_systems:
            if set_visible:
                render_children = ps.settings.rendered_child_count
                ps.settings.child_nbr = render_children   
            else:
                ps.settings.child_nbr =  1
     
    def get_outfit_options(self, context) -> list:
        self.__check_if_rig_exists()
        return self.__get_pcoll_list(context, 'outfit') 

    def set_outfit(self, context, chosen_outfit_option = None):
        self.__check_if_rig_exists()
        self.__check_if_in_finalize_phase()
                
        if not chosen_outfit_option:
            chosen_outfit_option = random.choice(self.get_outfit_options(context))
        
        self.__set_active_in_pcoll(context, 'outfit', chosen_outfit_option)

    def get_footwear_options(self, context) -> list:
        self.__check_if_rig_exists()
        return self.__get_pcoll_list(context, 'footwear') 

    def set_footwear(self, context, chosen_footwear_option = None):
        self.__check_if_rig_exists()
        self.__check_if_in_finalize_phase()
                
        if not chosen_footwear_option:
            chosen_footwear_option = random.choice(self.get_footwear_options(context))
        
        self.__set_active_in_pcoll(context, 'footwear', chosen_footwear_option)

    def get_pose_options(self, context) -> list:
        self.__check_if_rig_exists()
        return self.__get_pcoll_list(context, 'pose') 

    def set_pose(self, context, chosen_pose_option = None):
        self.__check_if_rig_exists()
        self.__check_if_in_finalize_phase()
                
        if not chosen_pose_option:
            chosen_pose_option = random.choice(self.get_pose_options(context))
        
        self.__set_active_in_pcoll(context, 'pose', chosen_pose_option)


    def get_expression_options(self, context):
        self.__check_if_rig_exists()
        return self.__get_pcoll_list(context, 'expression') 

    def set_expression(self, context, chosen_expression_option = None):
        self.__check_if_rig_exists()
        self.__check_if_in_finalize_phase()
                
        if not chosen_expression_option:
            chosen_expression_option = random.choice(
                    self.get_expression_options(context)
                )
        
        self.__set_active_in_pcoll(context, 'expression', chosen_expression_option)

     
    def __get_pcoll_list(self, context, pcoll_name): 
        sett = context.scene.HG3D
        
        refresh_pcoll(None, context, pcoll_name, hg_rig = self._rig_object)
        pcoll_list = sett['previews_list_{}'.format(pcoll_name)]
        
        return pcoll_list       
        
    def __set_active_in_pcoll(self, context, pcoll_name, item_to_set_as_active):
        sett = bpy.context.scene.HG3D
        
        refresh_pcoll(None, context, pcoll_name, hg_rig = self._rig_object)
        setattr(sett, f'pcoll_{pcoll_name}', item_to_set_as_active)

    def __check_if_in_creation_phase(self):
        if not in_creation_phase(self._rig_object):
            raise HumGenException("The human needs to be in creation phase to use this method.")

    def __check_if_in_finalize_phase(self):
        if not in_creation_phase(self._rig_object):
            raise HumGenException("The human needs to be in finalize phase to use this method.")

    def __check_if_rig_exists(self):
        if not self._rig_object:
            raise HumGenException("This HG_Human instance does not yet exist in Blender.")

class HG_BATCH_HUMAN():
    
    def __init__(self):
        self.settings_dict = {}
        self.quality_dict = {}
    
    def create_settings_dict_from_keywords(
        self,
        gender = random.choice(('male', 'female')),
        ethnicity = random.choice(('caucasian', 'black', 'asian')), #TODO option for custom ethnicities for custom starting humans
        add_hair = False,
        hair_type = 'particle',
        hair_quality = 'medium',
        add_expression = False,
        expressions_category = 'All',
        add_clothing = False,
        clothing_category = 'All',
        pose_type = 'A_Pose'
        ) -> dict:
        
        """Creates a dictionary with settings to pass to generate_human_in_background
        if you don't want to use the default settings or want to add hair, clothing
        etc. Creating this dict is optional.

        Args:
            gender (str, optional): The gender of the human to create, either 'male'
                or 'female'. 
                Defaults to random.choice(('male', 'female')).
            ethnicity (str, optional): Ethnicity of the human to create. Will search
                for starting humans with this string in their name.
                Defaults to random.choice(('caucasian', 'black', 'asian')).
            add_hair (bool, optional): If True, hair will be added to the created 
                human. 
                Defaults to False.
            hair_type (str, optional): Choose between 'particle' and 'haircards' for
                the add-on to create.
                Ignored if add_hair == False.
                Defaults to 'particle'.
            hair_quality (str, optional): The quality of the particle system to 
                create, in ('high', 'medium', 'low', 'ultralow'). 
                Defaults to 'medium'.
            add_expression (bool, optional): If True, a 1-click expression will be 
                added to the human.
                Defaults to False.
            expressions_category (str, optional): Category to choose expression 
                from.
                Use get_pcoll_categs('expression') to see options.
                Ignored if add_expression == False.
                Defaults to 'All'.
            add_clothing (bool, optional): If True, an outfit and footwear will be 
                added to this human.
                Defaults to False.
            clothing_category (str, optional): Category to choose outfit from. 
                Use get_pcoll_categs('outfit') to see options.
                Ignored if add_clothing == False.
                Defaults to 'All'.
            pose_type (str, optional): Category to choose pose from. 
                Use get_pcoll_categs('pose') to see options.
                Defaults to 'A_Pose'.

        Returns:
            dict: Settings dictionary to pass to generate_human_in_background
        """
        
        return locals()
        
    def create_quality_dict_from_keywords(
        self,
        delete_backup = True,
        apply_shapekeys = True,
        apply_armature_modifier = True,
        remove_clothing_subdiv = True,
        remove_clothing_solidify = True,
        apply_clothing_geometry_masks = True,
        texture_resolution = 'optimised'
        ) -> dict:
        """Creates a dictionary with settings to pass to generate_human_in_background
        if you want to change the quality settings from the default values.

        Args:
            delete_backup (bool, optional): Delete the backup human, which is an 
                extra object used to revert to creation phase and to load 1-click 
                expressions. 
                Big storage impact. Medium RAM impact.
                Defaults to True.
            apply_shapekeys (bool, optional): Applies all the shape keys on the 
                human. Simplifies object. 
                Small performance impact, medium storage impact. 
                Defaults to True.
            apply_armature_modifier (bool, optional): Applies the armature modifier,
                removes bone vertex groups and deletes the rig. 
                Use this if you don't need a rig. 
                Small impact. 
                Defaults to True.
            remove_clothing_subdiv (bool, optional): Removes any subdiv modifier 
                from clothing.
                Small to medium impact. 
                Defaults to True.
            remove_clothing_solidify (bool, optional): Removes any solidify modifier
                from clothing. 
                Small to medium impact. 
                Defaults to True.
            apply_clothing_geometry_masks (bool, optional): Applies the modifiers 
                that hide the body geometry behind clothing. 
                Small impact.
                Defaults to True.
            texture_resolution (str, optional): Texture resolution in 
                ('high', 'optimised', 'performance') from high to low. 
                Also applies to clothing, eyes and teeth.
                HUGE memory and Eevee impact. 
                Defaults to 'optimised'.

        Returns:
            dict: Quality dictionary to pass to generate_human_in_background
        """
        
        return locals()

    def generate_human_in_background(
            self,
            context
        ) -> bpy.types.Object:
        
        if not self.settings_dict:
            self.create_settings_dict_from_keywords()
        if not self.quality_dict:
            self.create_quality_dict_from_keywords()
        
        for obj in context.selected_objects:
            obj.select_set(False)

        python_file = os.path.join(get_addon_root(), 'scripts', 'batch_generate.py')
        
        start_time_background_process = time.time()
        
        hg_log('STARTING HumGen background process', level = 'BACKGROUND')
        self.__run_hg_subprocess(python_file)
        hg_log('^^^ HumGen background process ENDED', level = 'BACKGROUND')

        hg_log(f'Background Process succesful, took: ',
                round(time.time() - start_time_background_process, 2),
                's'
                )

        hg_rig = self.__import_generated_human()
        
        return hg_rig

    def __run_hg_subprocess(self, python_file):
        background_blender = subprocess.run(
            [
                bpy.app.binary_path,
                "--background",
                "--python",
                python_file,
                json.dumps({**self.settings_dict, **self.quality_dict})
            ],
            stdout= subprocess.PIPE,
            stderr= subprocess.PIPE)

        for line in background_blender.stdout.decode("utf-8").splitlines():
            if line.startswith(('HG_', '\033')):
                print(line)

        if background_blender.stderr:
            hg_log('Exception occured while in background process', level = 'WARNING')
            print(background_blender.stderr.decode("utf-8"))
            #ShowMessageBox(message = 
            #    f'''An error occured while generating human, check the console for error details''')

    def __import_generated_human(self):
        start_time_import = time.time()
        batch_result_path = os.path.join(get_prefs().filepath, 'batch_result.blend')
        with bpy.data.libraries.load(batch_result_path, link = False) as (data_from ,data_to):
            data_to.objects = data_from.objects
        
        for obj in data_to.objects:
            bpy.context.scene.collection.objects.link(obj)
            toggle_hair_visibility(obj, show = True)
        
        human_parent = next((obj for obj in data_to.objects if obj.HG.ishuman and obj.HG.backup),
                        [obj for obj in data_to.objects if obj.HG.ishuman][0])
        
        hg_log(f'Import succesful for human {human_parent.name}, import took: ',
                round(time.time() - start_time_import, 2),
                's'
                )
                
        return human_parent
