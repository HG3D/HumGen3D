# [tool:pytest]
# addopts = --cov=HumGen3D --cov-config=tests/.coveragerc

[mypy]
strict = True
show_error_codes=True
disable_error_code = valid-type, attr-defined, union-attr, misc, no-any-return
disallow_subclassing_any = False
namespace_packages = True
explicit_package_bases = True
ignore_missing_imports = True
implicit_reexport = True
warn_unused_ignores = False
exclude = user_interface|operators.py|extern|scripts|tests|properties

[pylint.MASTER]
load-plugins=pylint.extensions.docparams
ignore = extern, scripts, tutorial_operator, tests
disable=
    wrong-import-position,
    import-error,
    no-member,
    import-outside-toplevel,
    no-name-in-module,
    attribute-defined-outside-init,
    unspecified-encoding,
    too-few-public-methods,
    invalid-name,
    protected-access,
    relative-beyond-top-level,
    wrong-import-order,
    unused-argument,
    anomalous-backslash-in-string,
    # ##### ENABLE LATER ########
    no-else-continue,
    no-else-return,
    consider-using-f-string,
    possibly-unused-variable,
    consider-using-with,
    too-many-branches,
    too-many-locals,
    too-many-arguments,
    consider-using-generator,
    abstract-method,
    consider-using-get,
    redefined-outer-name,
    chained-comparison,
    arguments-differ,
    wildcard-import,
    too-many-instance-attributes,
    unnecessary-pass,
    use-maxsplit-arg,
    unnecessary-lambda-assignment,
    unnecessary-comprehension,
    unused-variable,
    duplicate-code,
    unbalanced-tuple-unpacking,
    arguments-renamed,
    inconsistent-return-statements,
    unidiomatic-typecheck,
    global-variable-not-assigned,
    consider-using-in,
    undefined-variable,
    logging-not-lazy,
    consider-using-dict-items,
    too-many-return-statements,
    broad-except,
    cyclic-import,
    bad-classmethod-argument,
    assignment-from-no-return,
    unused-wildcard-import,
    too-many-statements,
    unnecessary-lambda,
    unused-private-member,
    used-before-assignment,
    too-many-public-methods,
    consider-using-max-builtin,
    too-many-nested-blocks,
    redefined-builtin,
    not-an-iterable,
    useless-return,
    unreachable,
    eval-used,
    too-many-lines,
    ######### DUPLICATE FROM FLAKE8 ########
    missing-module-docstring,
    missing-class-docstring,
    missing-function-docstring,
    line-too-long,
    fixme,
    bare-except,
    unused-import,

[flake8]
max-line-length = 88
literal-inline-quotes = double
literal-multiline-quotes = double
args=["--darglint-ignore-regex", "^_(.*)"]
per-file-ignores =
    operators.py:D,
    user_interface/*:D,
    backend/*:D,
    tests/*:D,
    scripts/*:D,
    common/*:D,
ignore=
    # Imperitive mood for docstrings, annoying.
    D401,
    # Syntax error in forward annotation conflicts with Blender props annotation style
    F722,
    # Annotation syntax checker. Conflicts with Blender props annotation style
    F821,
    # Wants + operator on previous line. Disagree with this styling, conflicts with flake8 recommendation
    W503,
    # Suggest usage of dataclasses for property groups, but we don't want to use them
    PIE793,
    # Suggests random is insecure, but this doesn't matter for our implementation
    DUO102,
    # Prohibits assign and return. Disagree with this styling, makes return statements unclear
    PIE781,
    R504,
    # Wants docstrings in magic and init methods, but I don't think they are necessary
    D105,
    D107,
    # Checks class attribute order, conflicts with common sense placement
    CCE001,
    # Incorrectly suggest usage of single quotes for multiline, desipte cfg option
    LIT003,
    # Unecessary else after return, but I think it makes the code more readable
    R505,
    # Unecessary else statement after continue, just annoying
    R507,
    ##### TO BE ENABLED #####
    # Fixme
    T100,
    # Todo
    T101,
    # Too many function arguments
    CFQ002,
    # Too many return values
    CFQ004,
    # Function cognitive complexity
    CCR001

